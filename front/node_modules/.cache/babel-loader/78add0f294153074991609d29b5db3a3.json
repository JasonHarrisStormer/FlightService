{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yassin Aasim\\\\Desktop\\\\FlightService\\\\front\\\\src\\\\components\\\\Counter\\\\FunctionCounter.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const FunctionCounter = () => {\n  _s();\n\n  // useState is a hook\n  // Hooks are what were added to function components to add the same behavior as class components\n  // THey're called hooks because they allow us to hook into some aspect of our component\n  // Use array destructuring to extract the state variable as well as the setter for it\n  const [count, setCount] = useState(0); // Above your return, you can define any functions or varaibles you wish to use down below\n  // These are all \"private\" due to closures\n  // let count = 0; // Not stateful\n  // useEffect we can use to trigger \"side-effects\" on our components\n  // AKA any feature we would like to run at various points of a component's lifecycle\n  // Think of useEffect as componentDidUpdate, componentDidMount, and componentWillUnmount all wrapped into one hook\n  // Any time state changes, this callback function is executed\n\n  useEffect(() => {\n    console.log('State changed!');\n  }); // componentDidMount equivalent\n\n  useEffect(() => {\n    console.log('I am rendered!');\n  }, []); // Dependency array. When an item in the array changes value, the callback is executed\n  // componentDidUpdate equivalent\n  // this useEffect only runs the callback on mount and whenever the count state changes\n\n  useEffect(() => {\n    console.log('Count updated! ' + count);\n  }, [count]); // componentWillUnmount equivalent\n\n  useEffect(() => {\n    const intervalKey = setInterval(() => {\n      console.log(new Date());\n    }, 1000); // The function is returned will be executed as soon as the component unmounts\n\n    return () => {\n      console.log('I am unrendered!');\n      clearInterval(intervalKey);\n    };\n  }, []);\n\n  const increment = () => {\n    // I use the setCount for changing the count state\n    setCount(count + 1);\n  };\n\n  const decrement = () => {\n    // count--;\n    setCount(count - 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello Function Component!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Current Count is: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: increment,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: decrement,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FunctionCounter, \"iHB8CSV0XdzOPClb9VSYkk4RMnY=\");\n\n_c = FunctionCounter;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionCounter\");","map":{"version":3,"names":["useState","useEffect","FunctionCounter","count","setCount","console","log","intervalKey","setInterval","Date","clearInterval","increment","decrement"],"sources":["C:/Users/Yassin Aasim/Desktop/FlightService/front/src/components/Counter/FunctionCounter.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const FunctionCounter = () => {\n\n    // useState is a hook\n    // Hooks are what were added to function components to add the same behavior as class components\n    // THey're called hooks because they allow us to hook into some aspect of our component\n\n    // Use array destructuring to extract the state variable as well as the setter for it\n    const [count, setCount] = useState(0);\n\n    // Above your return, you can define any functions or varaibles you wish to use down below\n    // These are all \"private\" due to closures\n\n    // let count = 0; // Not stateful\n\n    // useEffect we can use to trigger \"side-effects\" on our components\n    // AKA any feature we would like to run at various points of a component's lifecycle\n    // Think of useEffect as componentDidUpdate, componentDidMount, and componentWillUnmount all wrapped into one hook\n\n    // Any time state changes, this callback function is executed\n    useEffect(() => {\n        console.log('State changed!');\n    });\n\n    // componentDidMount equivalent\n    useEffect(() => {\n        console.log('I am rendered!');\n    }, []); // Dependency array. When an item in the array changes value, the callback is executed\n\n    // componentDidUpdate equivalent\n    // this useEffect only runs the callback on mount and whenever the count state changes\n    useEffect(() => {\n        console.log('Count updated! ' + count);\n    }, [count]);\n\n    // componentWillUnmount equivalent\n    useEffect(() => {\n        const intervalKey = setInterval(() => {\n            console.log(new Date());\n        }, 1000);\n\n        // The function is returned will be executed as soon as the component unmounts\n        return () => {\n            console.log('I am unrendered!');\n            clearInterval(intervalKey);\n        }\n    }, []);\n\n    const increment = () => {\n        // I use the setCount for changing the count state\n        setCount(count + 1);\n    }\n\n    const decrement = () => {\n        // count--;\n        setCount(count - 1)\n    }\n\n    return (\n        <>\n            <h1>Hello Function Component!</h1>\n            {/* {} indicates an expression. It's an area where we can inject values, or write JavaScript code */}\n            <h2>Current Count is: {count}</h2>\n            <button onClick={increment}>+</button>\n            <button onClick={decrement}>-</button>\n        </>\n    );\n}"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;EAAA;;EAEjC;EACA;EACA;EAEA;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAD,CAAlC,CAPiC,CASjC;EACA;EAEA;EAEA;EACA;EACA;EAEA;;EACAC,SAAS,CAAC,MAAM;IACZI,OAAO,CAACC,GAAR,CAAY,gBAAZ;EACH,CAFQ,CAAT,CAnBiC,CAuBjC;;EACAL,SAAS,CAAC,MAAM;IACZI,OAAO,CAACC,GAAR,CAAY,gBAAZ;EACH,CAFQ,EAEN,EAFM,CAAT,CAxBiC,CA0BzB;EAER;EACA;;EACAL,SAAS,CAAC,MAAM;IACZI,OAAO,CAACC,GAAR,CAAY,oBAAoBH,KAAhC;EACH,CAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CA9BiC,CAkCjC;;EACAF,SAAS,CAAC,MAAM;IACZ,MAAMM,WAAW,GAAGC,WAAW,CAAC,MAAM;MAClCH,OAAO,CAACC,GAAR,CAAY,IAAIG,IAAJ,EAAZ;IACH,CAF8B,EAE5B,IAF4B,CAA/B,CADY,CAKZ;;IACA,OAAO,MAAM;MACTJ,OAAO,CAACC,GAAR,CAAY,kBAAZ;MACAI,aAAa,CAACH,WAAD,CAAb;IACH,CAHD;EAIH,CAVQ,EAUN,EAVM,CAAT;;EAYA,MAAMI,SAAS,GAAG,MAAM;IACpB;IACAP,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;EACH,CAHD;;EAKA,MAAMS,SAAS,GAAG,MAAM;IACpB;IACAR,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;EACH,CAHD;;EAKA,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAGI;MAAA,iCAAuBA,KAAvB;IAAA;MAAA;MAAA;MAAA;IAAA,QAHJ,eAII;MAAQ,OAAO,EAAEQ,SAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJJ,eAKI;MAAQ,OAAO,EAAEC,SAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALJ;EAAA,gBADJ;AASH,CAlEM;;GAAMV,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}